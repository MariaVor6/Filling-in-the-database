// Staff(table2).cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//



#include <iostream>
#include <soci/soci.h>
//#include<soci-platform.h>
//#include <soci/postgresql/soci-postgresql.h>
//#include <libpq-fe.h>
#include <random>
#include <ctime>
#include <set>
#include<locale.h>
#include <fstream>
#include <string>
#include <chrono>
using namespace std;
/*string generateRandomName(set<string>& usedNames, mt19937& gen) {
    //string prefix = "emp";
    uniform_int_distribution<int> dis(0, 999); // Диапазон для уникальных идентификаторов

    string name;
    do {
        name = to_string(dis(gen)); // уникальный идентификатор
    } while (usedNames.count(name) > 0); // Генерируем имя, пока оно не будет уникальным

    usedNames.insert(name); // Добавляем сгенерированное имя в использованные

    return name;
}*/
/*int main()
    {
      std::default_random_engine generator (std::chrono::system_clock::now().time_since_epoch().count());
      std::uniform_int_distribution<int> distribution(1, 10000);
     
      std::set<int> n;
      while (n.size() != 500) n.insert(distribution(generator));
     
      std::string s;
      std::ifstream ifs("infile.txt");
      std::ofstream ofs("outfile.txt");
      int i = 1;
      while (getline(ifs, s))
          if (n.count(i++) > 0)
              ofs << s << std::endl;
     
      return 0;
    }*/
/*string generateRandomName(set<string>& usedNames) {
    default_random_engine gen(std::chrono::system_clock::now().time_since_epoch().count());
    uniform_int_distribution<int> dis(0, 10); // Диапазон для уникальных идентификаторов


    string name;
    fstream file;
    
    
    do {
        file.open("name.txt", fstream::in);// уникальный идентификатор
    } while (getline(file, name)); 
        while (usedNames.count(name) > 0) { // Генерируем имя, пока оно не будет уникальным
            usedNames.insert(name);
        
    }
    
         // Добавляем сгенерированное имя в использованные

    

    return name;
}*/
void generateRandomName(set<string>& usedNames) {
    //default_random_engine gen(static_cast<int>(chrono::system_clock::now().time_since_epoch().count()));
    //uniform_int_distribution<int> dis(0, 3); // Диапазон для уникальных идентификаторов

    string name;
    ifstream file;
    file.open("name.txt", ifstream::in); // Открываем файл для чтения 
    if (file.is_open()) {
        while (getline(file, name)) { // Читаем из файла, пока не найдем уникальное имя

            usedNames.insert(name); // Добавляем сгенерированное имя в использованные
        }
    }
    file.close(); // Закрываем файл после использования
 
    //return name;
}
void generationRandomCity(set<string>& cityNames) {
    string city;
    ifstream file;
    file.open("city.txt", ifstream::in);
    if (file.is_open()) {
        while (getline(file, city)) {
            cityNames.insert(city);
        }
    }
    file.close();
}

int main() {
    //setlocale(LC_ALL, 0);
   
    try {
        
        set<string> usedNames; // Множество для хранения использованных имен
        set<string> cityNames;

        soci::session sql("postgresql", "dbname=postgres user=postgres password=06");

        //mt19937 gen(static_cast<unsigned int>(time(0))); // Генератор псевдослучайных чисел
        //set<string> usedNames; // Множество для хранения использованных имен
        sql << "CREATE TABLE Staff (ID integer GENERATED BY DEFAULT AS IDENTITY, Name text NOT NULL, Age integer NOT NULL, City text , Experience integer NOT NULL, Email text)";

        
        //CONSTRAINT "PK_AuditEvents" PRIMARY KEY("ID")

    //DateTime date_time;
    // date_time.datetime();
        generateRandomName(usedNames);
        generationRandomCity(cityNames);
        vector<string> v;
        vector<string> c;

        v.reserve(usedNames.size());
        copy(usedNames.begin(), usedNames.end(), back_inserter(v));

        c.reserve(cityNames.size());
        copy(cityNames.begin(), cityNames.end(), back_inserter(c));

        for (int i = 0; i < 10; ++i) {
            //generateRandomName(usedNames);
            int index0 = rand() % usedNames.size();
            int index1 = rand() % cityNames.size();
            int age = 1 + rand() % (55 - 1 + 1); // Возраст
            int experience = 1 + rand() % (25 - 1 + 1); // Стаж
            string city = c[index1];
            string email = "noyname@yandex.ru";
            string user = v[index0];



            /*stringstream ss;

            ss << day << '-' << mounth << '-' << year;
            std::string date_value = ss.str();*/




            sql << "INSERT INTO Staff (Name, Age, City, Experience, Email) "
                "VALUES ( :user, :age, :city, :experience, :email)",
                soci::use(user), soci::use(age), soci::use(city), soci::use(experience), soci::use(email);
        }

        cout << "Yes employees." << endl;
    }
    catch (exception const& err) {
        cout << "Not zapros: " << err.what() << endl;
    }

    return 0;
}

